package export

import (
	"errors"
	"path"
	"strconv"

	"github.com/jung-kurt/gofpdf"
	"github.com/oklog/ulid/v2"
)

func _findFractionOfColumns(content [][]string) ([]float64, error) {
	if len(content) == 0 {
		return make([]float64, 0), errors.New("no content found")
	}

	columnCount := len(content[0])
	maxSizes := make([]int, columnCount)

	for _, row := range content {
		for columnIndex, cell := range row {
			cellLength := len(cell)
			if cellLength > maxSizes[columnIndex] {
				maxSizes[columnIndex] = cellLength
			}
		}
	}

	defaultMaxSize := 40
	defaultMinSize := 10
	for i, maxSize := range maxSizes {
		if maxSize > defaultMaxSize {
			maxSizes[i] = defaultMaxSize
		} else if maxSize < defaultMinSize {
			maxSizes[i] = defaultMinSize
		}
	}

	totalSize := 0
	for _, s := range maxSizes {
		totalSize += s
	}

	percentages := make([]float64, len(maxSizes))
	for i, s := range maxSizes {
		percentage := float64(s) / float64(totalSize)
		percentages[i] = percentage
	}
	return percentages, nil
}

func savePdfFile(conf *Conf, tableData [][]string) (string, error) {
	filePath := path.Join(conf.FileBasePath, ulid.Make().String()+".pdf")
	pdf := gofpdf.New(conf.Pdf.Orientation, "mm", conf.Pdf.PageSize, "")

	// adding footer
	pdf.SetFooterFunc(func() {
		pdf.SetY(-10)
		pdf.SetFont("Arial", "I", 5)
		pageStr := strconv.Itoa(pdf.PageNo())
		footerText := "Document generated by Bitcomm Technologies Pvt. Ltd"
		pdf.CellFormat(0, 5, footerText+" - Page "+pageStr, "", 0, "C", false, 0, "")
		pdf.Ln(-1)
		pdf.SetTextColor(120, 170, 250)
		pdf.CellFormat(0, 5, "bitcommtechnologies.com", "", 0, "C", false, 0, "https://bitcommtechnologies.com")
	})

	// setting title
	pdf.AddPage()
	pdf.SetFont("Arial", "B", 12)
	pdf.CellFormat(0, 10, conf.Pdf.Title, "", 1, "C", false, 0, "")

	pdf.SetFont("Arial", "", 7)
	pdf.SetFillColor(124, 171, 247)
	pdf.SetTextColor(0, 0, 0)

	// Calculate column widths
	pageWidth, _ := pdf.GetPageSize()
	margin := 10.0
	availableWidth := pageWidth - 2*margin
	columnCount := len(conf.Cols)

	headerAliases := conf.getAliases()
	spaceFraction, e := _findFractionOfColumns(append(tableData, headerAliases))
	if e != nil {
		for i := 0; i < columnCount; i++ {
			spaceFraction = append(spaceFraction, 1)
		}
	}

	// write table header
	for i, column := range headerAliases {
		pdf.CellFormat(availableWidth*spaceFraction[i], 8, column, "1", 0, "C", true, 0, "")
	}
	pdf.Ln(-1)

	// Add table data
	for _, row := range tableData {
		for i, column := range row {
			pdf.CellFormat(availableWidth*spaceFraction[i], 6, column, "TB", 0, "C", false, 0, "")
		}
		pdf.Ln(-1)
	}

	if e = pdf.OutputFileAndClose(filePath); e != nil {
		return "", e
	} else {
		return filePath, nil
	}
}
